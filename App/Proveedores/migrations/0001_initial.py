# Generated by Django 5.0.4 on 2024-09-09 23:01

import django.db.models.deletion
from django.db import migrations, models
import pandas as pd


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    def insert_init_data(apps, schema_editor):
 #---------------------------------------------------------------------------------------------------------------------------------------------       
        #Crea el país
        Pais = apps.get_model('Proveedores', 'Pais')
        Pais.objects.create(nombre = 'ARGENTINA')
#---------------------------------------------------------------------------------------------------------------------------------------------
        #Crea las provincias
        df = pd.read_csv('Proveedores/migrations/PROVINCIAS LOCALIDADES.csv', sep= ';')

        list_provincias = df['PROVINCIA'].unique()

        Provincia = apps.get_model('Proveedores', 'Provincia')
        Pais = apps.get_model('Proveedores', 'Pais')

        paisbd = Pais.objects.get(nombre = 'ARGENTINA')

        list_servicios_register_objs = []

        for i in list_provincias:
            list_servicios_register_objs.append(
                Provincia(
                    idPais = paisbd ,
                    nombre = i
                )
            )
        Provincia.objects.bulk_create (list_servicios_register_objs)  
#---------------------------------------------------------------------------------------------------------------------------------------------
        #Crea Ciudades
        df = pd.read_csv('Proveedores/migrations/PROVINCIAS LOCALIDADES.csv', sep= ';')

        Provincia = apps.get_model('Proveedores', 'Provincia')
        Ciudad = apps.get_model('Proveedores', 'Ciudad')

        list_servicios_register_objs = []
        for i, row in df.iterrows():
            provinciabd = Provincia.objects.get(nombre = row['PROVINCIA'])
            list_servicios_register_objs.append(
                Ciudad(
                    idProvincia = provinciabd,
                    nombre = row['CIUDAD']
                )
            )    
        Ciudad.objects.bulk_create (list_servicios_register_objs) 
#---------------------------------------------------------------------------------------------------------------------------------------------
        #Crea Proveedores
        df = pd.read_csv('Proveedores/migrations/PROVEEDORES.csv', sep= ';')

        Provincia = apps.get_model('Proveedores', 'Provincia')
        Ciudad = apps.get_model('Proveedores', 'Ciudad')
        Pais = apps.get_model('Proveedores', 'Pais')
        Proveedor = apps.get_model('Proveedores', 'Proveedor')

        list_servicios_register_objs = []
        for i, row in df.iterrows():
            paisabd = Pais.objects.get(nombre = row['PAIS'])
            provinciabd = Provincia.objects.get(nombre = row['PROVINCIA'])
            ciudadbd = Ciudad.objects.get(nombre = row['CIUDAD'])
            Proveedor.objects.create(
                empresa     = row['EMPRESA'],
                idPais      = paisabd,
                idProvincia = provinciabd,
                idCiudad    = ciudadbd,
                calle       = row['CALLE'],
                altura      = row['ALTURA'],
                telefono    = row['TELEFONO'],
                email       = row['EMAIL'],
                web         = row['WEB']
            )        

    def undo_insert_data(apps, schema_editor):
 #--------------------------------------------------------------------------------------------------------------------------------------------- 
        #Borra Proveedores         
        Proveedor = apps.get_model('Proveedores', 'Proveedor')
        Proveedor.objects.all().delete()
 #--------------------------------------------------------------------------------------------------------------------------------------------- 
        #Borra Ciudades        
        Ciudad = apps.get_model('Proveedores', 'Ciudad')
        Ciudad.objects.all().delete()
 #--------------------------------------------------------------------------------------------------------------------------------------------- 
        #Borra Provincias          
        Provincia = apps.get_model('Proveedores', 'Provincia')
        Provincia.objects.all().delete()
 #--------------------------------------------------------------------------------------------------------------------------------------------- 
        #Borra Paises        
        Pais = apps.get_model('Proveedores', 'Pais')
        Pais.objects.all().delete()

    operations = [
        migrations.CreateModel(
            name='Ciudad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=30, verbose_name='Ciudad')),
            ],
            options={
                'verbose_name': 'Ciudad',
                'verbose_name_plural': 'Ciudades',
                'db_table': 'ciudad',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Pais',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=30, unique=True, verbose_name='Pais')),
            ],
            options={
                'verbose_name': 'País',
                'verbose_name_plural': 'Paises',
                'db_table': 'paises',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Provincia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=30, verbose_name='Provincia')),
                ('idPais', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Proveedores.pais', verbose_name='País')),
            ],
            options={
                'verbose_name': 'Provincia',
                'verbose_name_plural': 'Provincias',
                'db_table': 'provincia',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Proveedor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('empresa', models.CharField(max_length=30, unique=True, verbose_name='Empresa')),
                ('calle', models.CharField(blank=True, max_length=30, null=True, verbose_name='Calle')),
                ('altura', models.CharField(blank=True, max_length=10, null=True, verbose_name='Altura')),
                ('telefono', models.CharField(blank=True, max_length=25, null=True, verbose_name='Teléfono')),
                ('email', models.EmailField(max_length=40, verbose_name='E-Mail')),
                ('web', models.CharField(blank=True, max_length=40, null=True, verbose_name='Web')),
                ('logo', models.ImageField(default='proveedores/default.png', upload_to='proveedores')),
                ('idCiudad', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Proveedores.ciudad', verbose_name='Ciudad')),
                ('idPais', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Proveedores.pais', verbose_name='Pais')),
                ('idProvincia', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Proveedores.provincia', verbose_name='Provincia')),
            ],
            options={
                'verbose_name': 'Proveedor',
                'verbose_name_plural': 'Proveedores',
                'db_table': 'proveedor',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='ciudad',
            name='idProvincia',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Proveedores.provincia', verbose_name='Provincia'),
        ),
        migrations.RunPython(insert_init_data, reverse_code =  undo_insert_data)
    ]
